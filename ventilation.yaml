blueprint:
  name: PID Ventilation Control
  description: Control a fan based on CO₂ sensor using a PID controller.
  domain: automation
  input:
    co2_sensor:
      name: CO₂ Sensor
      selector:
        entity:
          domain: sensor
    setpoint:
      name: CO₂ Setpoint (ppm)
      default: 800
      selector:
        number:
          min: 400
          max: 2000
          step: 1
    kp:
      name: Kp (Proportional gain)
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 10.0
          step: 0.01
    ki:
      name: Ki (Integral gain)
      default: 0.1
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01
    kd:
      name: Kd (Derivative gain)
      default: 0.01
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01

triggers:
  - trigger: time_pattern
    seconds: "10"  # Run every 10 seconds

variables:
  co2_sensor: !input co2_sensor
  co2: "{{ states(co2_sensor) | float }}"
  setpoint: !input setpoint
  kp: !input kp
  ki: !input ki
  kd: !input kd
  error: "{{ co2 - setpoint }}"
  integral: "{{ state_attr('input_number.pid_integral', 'value') | float(0) + error }}"
  derivative: "{{ error - (state_attr('input_number.pid_prev_error', 'value') | float(0)) }}"
  pid_output: "{{ kp * error + ki * integral + kd * derivative }}"
  fan_speed: >
    {% set min_speed = 0 %}
    {% set max_speed = 100 %}
    {{ [min_speed, [pid_output, max_speed] | min] | max | round(0) }}

action:
  - service: input_number.set_value
    target:
      entity_id: input_number.pid_integral
    data:
      value: "{{ integral }}"
  - service: input_number.set_value
    target:
      entity_id: input_number.pid_prev_error
    data:
      value: "{{ error }}"
  - action: ramses_cc.send_command
    data:
      num_repeats: 3
      delay_secs: 0.05
      entity_id: remote.29_162275
      command: auto

mode: single